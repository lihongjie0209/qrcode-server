name: Build and Push Docker Image (Simple)

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: lihongjie0209/qrcode-server

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Install GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: 'graalvm-community'
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Build native executable with increased memory
      run: |
        export MAVEN_OPTS="-Xmx3g"
        ./mvnw package -Dnative -DskipTests=true -Dquarkus.native.additional-build-args=--verbose

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      run: |
        docker build -f src/main/docker/Dockerfile.native -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest .
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Push additional tags
        echo "${{ steps.meta.outputs.tags }}" | while read tag; do
          if [ "$tag" != "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" ]; then
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest "$tag"
            docker push "$tag"
          fi
        done
