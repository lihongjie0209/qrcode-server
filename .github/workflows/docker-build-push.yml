name: Build and Push Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: lihongjie0209/qrcode-server

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build fat jar
      run: |
        chmod +x ./mvnw
        ./mvnw package -DskipTests=true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/main/docker/Dockerfile.jvm-uber
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max


  deploy-cloud-run:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && success()
    
    steps:
    - name: Checkout代码
      uses: actions/checkout@v4
    
    - name: 配置GCP身份验证
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: 设置Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: 提取版本号
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "image_uri=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION" >> $GITHUB_OUTPUT
    
    - name: 部署到Cloud Run
      run: |
        echo "🚀 开始部署到GCP Cloud Run..."
        
        # 部署到Cloud Run
        gcloud run deploy ${{ vars.CLOUD_RUN_SERVICE_NAME || 'qrcode-server' }} \
          --image=${{ steps.version.outputs.image_uri }} \
          --platform=managed \
          --region=${{ vars.GCP_REGION || 'asia-east2' }} \
          --allow-unauthenticated \
          --port=8080 \
          --memory=${{ vars.CLOUD_RUN_MEMORY || '1Gi' }} \
          --cpu=${{ vars.CLOUD_RUN_CPU || '1' }} \
          --concurrency=${{ vars.CLOUD_RUN_CONCURRENCY || '80' }} \
          --max-instances=${{ vars.CLOUD_RUN_MAX_INSTANCES || '10' }} \
          --min-instances=${{ vars.CLOUD_RUN_MIN_INSTANCES || '0' }} \
          --timeout=${{ vars.CLOUD_RUN_TIMEOUT || '300' }} \
          --set-env-vars="QUARKUS_LOG_LEVEL=${{ vars.QUARKUS_LOG_LEVEL || 'INFO' }}" \
          --quiet
        
        echo "✅ Cloud Run部署完成"
    
    - name: 获取服务URL
      id: service-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ vars.CLOUD_RUN_SERVICE_NAME || 'qrcode-server' }} \
          --region=${{ vars.GCP_REGION || 'asia-east2' }} \
          --format='value(status.url)')
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "🌐 服务URL: $SERVICE_URL"
    

    
    - name: 部署总结
      run: |
        VERSION=${{ steps.version.outputs.version }}
        SERVICE_URL="${{ steps.service-url.outputs.url }}"
        
        echo "## 🌐 Cloud Run部署成功!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 部署信息" >> $GITHUB_STEP_SUMMARY
        echo "- **版本**: \`v$VERSION\`" >> $GITHUB_STEP_SUMMARY
        echo "- **镜像**: \`${{ steps.version.outputs.image_uri }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **服务名**: \`${{ vars.CLOUD_RUN_SERVICE_NAME || 'qrcode-server' }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **区域**: \`${{ vars.GCP_REGION || 'asia-east2' }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **服务URL**: [$SERVICE_URL]($SERVICE_URL)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 快速访问" >> $GITHUB_STEP_SUMMARY
        echo "- [🌐 Web界面]($SERVICE_URL)" >> $GITHUB_STEP_SUMMARY
        echo "- [� 指标监控]($SERVICE_URL/metrics)" >> $GITHUB_STEP_SUMMARY
        echo "- [🩺 健康检查]($SERVICE_URL/q/health)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🧪 测试命令" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "# 健康检查" >> $GITHUB_STEP_SUMMARY
        echo "curl $SERVICE_URL/q/health" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# QR码检测API健康检查" >> $GITHUB_STEP_SUMMARY
        echo "curl $SERVICE_URL/api/qrcode/health" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# QR码检测测试" >> $GITHUB_STEP_SUMMARY
        echo "curl -X POST -F \"file=@your-qrcode-image.jpg\" \\" >> $GITHUB_STEP_SUMMARY
        echo "     \"$SERVICE_URL/api/qrcode/detect\"" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "# 获取Prometheus指标" >> $GITHUB_STEP_SUMMARY
        echo "curl $SERVICE_URL/q/metrics" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY



